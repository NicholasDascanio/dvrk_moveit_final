/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-12-28 15:49:30.719184
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37;
x0=IKcos(j[1]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[4]);
x4=IKcos(j[3]);
x5=IKcos(j[0]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=((9.99999825900045e-6)*x2);
x9=((5.89999897281027e-9)*x0);
x10=((0.999999825950045)*x1);
x11=((2.9999999985e-5)*x3);
x12=((0.99999999955)*x7);
x13=((2.99999999715e-10)*x6);
x14=((2.9999999985e-5)*x7);
x15=((0.99999999955)*x3);
x16=((2.99999999715e-10)*x4);
x17=((1.3e-7)*x4);
x18=(x1*x2);
x19=(x2*x5);
x20=(x0*x5);
x21=(x1*x6);
x22=(x0*x1);
x23=(x5*x6);
x24=((((0.999999825900045)*x0))+(((-0.000589999897281027)*x2)));
x25=((((9.99999825900045e-6)*x0))+(((-5.89999897281027e-9)*x2)));
x26=(x9+x8);
x27=(x24*x4);
x28=(x25*x4);
x29=((((-0.000589999897310527)*x22))+(((-1.0)*x10*x2)));
x30=((((0.999999825950045)*x19))+(((0.000589999897310527)*x20)));
x31=((((9.99999825900045e-6)*x20))+(((0.99999999995)*x21)));
x32=((((-0.999999825900045)*x2))+x28+(((-0.000589999897281027)*x0)));
x33=(x30*x4);
x34=(x29*x4);
x35=((((5.89999897281027e-9)*x19))+(((0.99999999995)*x33)));
x36=((((-9.9999999995e-6)*x34))+(((9.9999999995e-6)*x23))+(((0.999999825900045)*x22))+(((-0.000589999897281027)*x18)));
x37=((((0.000589999897281027)*x19))+(((-9.9999999995e-6)*x33))+(((9.9999999995e-6)*x21))+(((-0.999999825900045)*x20)));
eerot[0]=((((((((((((-9.99999999e-11)*(IKcos(j[0]))*(IKcos(j[3]))))+(((9.9999999995e-6)*(((((-2.99999947635014e-5)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.76999969104658e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.9999999985e-10)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-2.99999999865e-5)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((0.9999999995)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.99999999945)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((9.99999825000046e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999896750027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((9.9999999995e-6)*(((((0.9999999995)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.999999825400046)*(IKcos(j[1]))*(IKsin(j[0]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.000589999896986027)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-1.76999969104658e-13)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.99999999865e-5)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((2.99999947635014e-10)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-2.9999999985e-5)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.99999999995)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-9.9999999945e-11)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-0.9999999999)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.99999825400045e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((5.89999896986027e-14)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((9.99999999e-6)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.99999999995)*(((((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.9999999995)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.99999999945)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((-2.99999947635014e-10)*(IKcos(j[1]))*(IKsin(j[0]))))+(((2.9999999985e-5)*(IKcos(j[0]))*(IKsin(j[3]))))+(((1.76999969104658e-13)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-0.9999999995)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.000589999896986027)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.999999825400046)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-5.89999896750027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.99999825000046e-6)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((2.9999999985e-10)*(IKcos(j[0]))*(IKsin(j[3]))))+(((2.99999999865e-5)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.99999947635014e-5)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((9.9999999995e-6)*(((((-9.999999995e-6)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.99999825400045e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((5.89999896986027e-14)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-9.9999999945e-11)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-9.999999999e-6)*(IKcos(j[0]))*(IKcos(j[3]))))+(((9.9999999995e-6)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((9.9999999995e-6)*(((((-9.999999995e-6)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.99999825400045e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((5.89999896986027e-14)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-9.9999999945e-11)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-9.999999999e-6)*(IKcos(j[0]))*(IKcos(j[3]))))+(((9.9999999995e-6)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.9999999999)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.99999999995)*(((((-9.9999999945e-11)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-0.99999999995)*(((((-9.999999995e-6)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.99999825400045e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((5.89999896986027e-14)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((9.9999999995e-6)*(((((-2.99999947635014e-10)*(IKcos(j[1]))*(IKsin(j[0]))))+(((2.9999999985e-5)*(IKcos(j[0]))*(IKsin(j[3]))))+(((1.76999969104658e-13)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-5.89999896750027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.99999825000046e-6)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((9.9999999995e-6)*(((((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.9999999995)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.99999999945)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((9.99999999e-11)*(IKcos(j[0]))*(IKcos(j[3]))))+(((9.9999999995e-6)*(((((2.9999999985e-10)*(IKcos(j[0]))*(IKsin(j[3]))))+(((2.99999999865e-5)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.99999947635014e-5)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-0.9999999995)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.000589999896986027)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.999999825400046)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((9.99999999e-6)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.99999999995)*(((((0.9999999995)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.99999999945)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((9.99999825000046e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999896750027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.99999999995)*(((((-1.76999969104658e-13)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.99999999865e-5)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((2.99999947635014e-10)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-2.9999999985e-5)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((-2.99999947635014e-5)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.76999969104658e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.9999999985e-10)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-2.99999999865e-5)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((0.9999999995)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.999999825400046)*(IKcos(j[1]))*(IKsin(j[0]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.000589999896986027)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))))*(IKcos(j[6])))));
eerot[1]=((((((((((((-9.99999999e-11)*(IKcos(j[0]))*(IKcos(j[3]))))+(((9.9999999995e-6)*(((((-2.99999947635014e-5)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.76999969104658e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.9999999985e-10)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-2.99999999865e-5)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((0.9999999995)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.99999999945)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((9.99999825000046e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999896750027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((9.9999999995e-6)*(((((0.9999999995)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.999999825400046)*(IKcos(j[1]))*(IKsin(j[0]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.000589999896986027)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-1.76999969104658e-13)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.99999999865e-5)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((2.99999947635014e-10)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-2.9999999985e-5)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.99999999995)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-9.9999999945e-11)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-0.9999999999)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.99999825400045e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((5.89999896986027e-14)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((9.99999999e-6)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.99999999995)*(((((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.9999999995)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.99999999945)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((-2.99999947635014e-10)*(IKcos(j[1]))*(IKsin(j[0]))))+(((2.9999999985e-5)*(IKcos(j[0]))*(IKsin(j[3]))))+(((1.76999969104658e-13)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-0.9999999995)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.000589999896986027)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.999999825400046)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-5.89999896750027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.99999825000046e-6)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((2.9999999985e-10)*(IKcos(j[0]))*(IKsin(j[3]))))+(((2.99999999865e-5)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.99999947635014e-5)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((9.9999999995e-6)*(((((-9.999999995e-6)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.99999825400045e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((5.89999896986027e-14)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-9.9999999945e-11)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-9.999999999e-6)*(IKcos(j[0]))*(IKcos(j[3]))))+(((9.9999999995e-6)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((((((-9.9999999995e-6)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((-9.999999995e-6)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.99999825400045e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((5.89999896986027e-14)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-9.9999999995e-6)*(((((-9.9999999945e-11)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((9.999999999e-6)*(IKcos(j[0]))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((0.99999999995)*(((((0.9999999995)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.999999825400046)*(IKcos(j[1]))*(IKsin(j[0]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.000589999896986027)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((0.9999999995)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.99999999945)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((-9.99999999e-6)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.99999999995)*(((((-2.99999947635014e-5)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.76999969104658e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.9999999985e-10)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-2.99999999865e-5)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((9.99999825000046e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999896750027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-1.76999969104658e-13)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.99999999865e-5)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((2.99999947635014e-10)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-2.9999999985e-5)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-9.9999999995e-6)*(((((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.9999999995)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.99999999945)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-9.99999999e-11)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-9.9999999995e-6)*(((((-0.9999999995)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.000589999896986027)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.999999825400046)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((-5.89999896750027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.99999825000046e-6)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((2.9999999985e-10)*(IKcos(j[0]))*(IKsin(j[3]))))+(((2.99999999865e-5)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.99999947635014e-5)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((-9.9999999995e-6)*(((((-2.99999947635014e-10)*(IKcos(j[1]))*(IKsin(j[0]))))+(((2.9999999985e-5)*(IKcos(j[0]))*(IKsin(j[3]))))+(((1.76999969104658e-13)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.99999999995)*(((((0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-9.9999999945e-11)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((5.89999897281027e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-0.9999999999)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((-0.000589999897281027)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.999999825900045)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.99999825400045e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((5.89999896986027e-14)*(IKsin(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6])))));
IkReal x38=((((5.89999897281027e-9)*x18))+(((0.99999999995)*x23)));
IkReal x39=((((9.99999825900045e-6)*x22))+(((0.99999999995)*x34)));
eerot[2]=((((-1.0)*x13*x29))+(((-1.0)*x16*x5))+((x11*x36))+((x14*(((((-1.0)*x38))+x39))))+((x15*(((((-1.0)*x39))+x38))))+((x12*x36)));
eetrans[0]=((((0.0156000724395911)*x22))+((x7*(((((1.299999999935e-12)*x23))+(((1.29999977367006e-7)*x22))+(((-1.299999999935e-12)*x34))+(((-7.66999866465335e-11)*x18))))))+((x3*(((((9.099999999545e-8)*x34))+(((-9.099999999545e-8)*x23))+(((-0.00909999841569041)*x22))+(((5.36899906525734e-6)*x18))))))+(((0.000245557957260641)*x18))+((x7*(((((0.009099999999545)*x23))+(((5.36899906525734e-11)*x18))+(((-0.009099999999545)*x34))+(((-9.09999841569041e-8)*x22))))))+((j[2]*(((((-1.0)*x0*x10))+(((0.000589999897310527)*x18))))))+((x3*(((((1.299999999935e-7)*x23))+(((-1.29999977367006e-12)*x22))+(((7.66999866465335e-16)*x18))+(((-1.299999999935e-7)*x34)))))));
eerot[3]=((((((((((((9.9999999995e-6)*(((((-9.999999995e-6)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.99999825400045e-11)*(IKsin(j[1]))))+(((5.89999896986027e-14)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((9.9999999995e-6)*(((((2.99999947635014e-5)*(IKsin(j[1]))))+(((1.76999969104658e-8)*(IKcos(j[1]))))+(((-2.99999999865e-5)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-2.99999947635014e-10)*(IKsin(j[1]))))+(((-2.99999999865e-5)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-13)*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-5.89999896750027e-9)*(IKsin(j[1]))))+(((9.99999825000046e-6)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((9.9999999995e-6)*(((((-0.999999825400046)*(IKsin(j[1]))))+(((-0.000589999896986027)*(IKcos(j[1]))))+(((0.9999999995)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((0.9999999995)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-5.89999896986027e-9)*(IKcos(j[1]))))+(((-9.99999825400045e-6)*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.99999999995)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.99999825400045e-11)*(IKsin(j[1]))))+(((5.89999896986027e-14)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.99999999995)*(((((-9.99999825000046e-6)*(IKcos(j[1]))))+(((5.89999896750027e-9)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))+(((-0.9999999995)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((2.99999947635014e-10)*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((1.76999969104658e-13)*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((2.99999999865e-5)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.99999947635014e-5)*(IKsin(j[1]))))+(((-1.76999969104658e-8)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((0.999999825400046)*(IKsin(j[1]))))+(((0.000589999896986027)*(IKcos(j[1]))))+(((-0.9999999995)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((9.9999999995e-6)*(((((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))+(((-0.9999999995)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-9.99999825000046e-6)*(IKcos(j[1]))))+(((5.89999896750027e-9)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((9.9999999995e-6)*(((((2.99999999865e-5)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.99999947635014e-5)*(IKsin(j[1]))))+(((-1.76999969104658e-8)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((0.999999825400046)*(IKsin(j[1]))))+(((0.000589999896986027)*(IKcos(j[1]))))+(((-0.9999999995)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((2.99999947635014e-10)*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((1.76999969104658e-13)*(IKcos(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.99999999995)*(((((-5.89999896750027e-9)*(IKsin(j[1]))))+(((9.99999825000046e-6)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-0.99999999995)*(((((-2.99999947635014e-10)*(IKsin(j[1]))))+(((-2.99999999865e-5)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-13)*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((0.9999999995)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-5.89999896986027e-9)*(IKcos(j[1]))))+(((-9.99999825400045e-6)*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((2.99999947635014e-5)*(IKsin(j[1]))))+(((1.76999969104658e-8)*(IKcos(j[1]))))+(((-2.99999999865e-5)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((-0.999999825400046)*(IKsin(j[1]))))+(((-0.000589999896986027)*(IKcos(j[1]))))+(((0.9999999995)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((9.9999999995e-6)*(((((-9.999999995e-6)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.99999825400045e-11)*(IKsin(j[1]))))+(((5.89999896986027e-14)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.99999999995)*(((((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((-9.999999995e-6)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.99999825400045e-11)*(IKsin(j[1]))))+(((5.89999896986027e-14)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKcos(j[6])))));
eerot[4]=((((((((((((0.99999999995)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.99999825400045e-11)*(IKsin(j[1]))))+(((5.89999896986027e-14)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-9.9999999995e-6)*(((((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((-9.999999995e-6)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.99999825400045e-11)*(IKsin(j[1]))))+(((5.89999896986027e-14)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((-9.9999999995e-6)*(((((2.99999947635014e-10)*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((1.76999969104658e-13)*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((2.99999999865e-5)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.99999947635014e-5)*(IKsin(j[1]))))+(((-1.76999969104658e-8)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-9.9999999995e-6)*(((((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))+(((-0.9999999995)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-9.9999999995e-6)*(((((0.999999825400046)*(IKsin(j[1]))))+(((0.000589999896986027)*(IKcos(j[1]))))+(((-0.9999999995)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((-9.99999825000046e-6)*(IKcos(j[1]))))+(((5.89999896750027e-9)*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.99999999995)*(((((0.9999999995)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-5.89999896986027e-9)*(IKcos(j[1]))))+(((-9.99999825400045e-6)*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((2.99999947635014e-5)*(IKsin(j[1]))))+(((1.76999969104658e-8)*(IKcos(j[1]))))+(((-2.99999999865e-5)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((-5.89999896750027e-9)*(IKsin(j[1]))))+(((9.99999825000046e-6)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-0.999999825400046)*(IKsin(j[1]))))+(((-0.000589999896986027)*(IKcos(j[1]))))+(((0.9999999995)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-2.99999947635014e-10)*(IKsin(j[1]))))+(((-2.99999999865e-5)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-13)*(IKcos(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((((((9.9999999995e-6)*(((((-9.999999995e-6)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.99999825400045e-11)*(IKsin(j[1]))))+(((5.89999896986027e-14)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((9.9999999995e-6)*(((((2.99999947635014e-5)*(IKsin(j[1]))))+(((1.76999969104658e-8)*(IKcos(j[1]))))+(((-2.99999999865e-5)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-2.99999947635014e-10)*(IKsin(j[1]))))+(((-2.99999999865e-5)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-13)*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-5.89999896750027e-9)*(IKsin(j[1]))))+(((9.99999825000046e-6)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((9.9999999995e-6)*(((((-0.999999825400046)*(IKsin(j[1]))))+(((-0.000589999896986027)*(IKcos(j[1]))))+(((0.9999999995)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((0.9999999995)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-5.89999896986027e-9)*(IKcos(j[1]))))+(((-9.99999825400045e-6)*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.99999999995)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.99999825400045e-11)*(IKsin(j[1]))))+(((5.89999896986027e-14)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.99999999995)*(((((-9.99999825000046e-6)*(IKcos(j[1]))))+(((5.89999896750027e-9)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((5.89999896986027e-9)*(IKcos(j[1]))))+(((9.99999825400045e-6)*(IKsin(j[1]))))+(((-0.9999999995)*(((((0.000589999897281027)*(IKsin(j[1]))))+(((-0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((2.99999947635014e-10)*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((-0.000589999897281027)*(IKsin(j[1]))))+(((0.999999825900045)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((1.76999969104658e-13)*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((2.99999999865e-5)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.99999947635014e-5)*(IKsin(j[1]))))+(((-1.76999969104658e-8)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((0.999999825400046)*(IKsin(j[1]))))+(((0.000589999896986027)*(IKcos(j[1]))))+(((-0.9999999995)*(((((9.99999825900045e-6)*(IKcos(j[1]))))+(((-5.89999897281027e-9)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6])))));
eerot[5]=(((x15*((x26+x27))))+((x14*(((((-1.0)*x26))+(((-1.0)*x27))))))+((x11*x32))+((x6*(((((-1.76999969025008e-13)*x2))+(((2.99999947500014e-10)*x0))))))+((x12*x32)));
eetrans[1]=((((-0.0156000724395911)*x2))+(((0.000245557957260641)*x0))+((x7*(((((-1.29999977367006e-7)*x2))+(((-7.66999866465335e-11)*x0))+((x17*x25))))))+((x3*(((((-0.0091)*x28))+(((0.00909999841569041)*x2))+(((5.36899906525734e-6)*x0))))))+((j[2]*(((((0.999999825950045)*x2))+(((0.000589999897310527)*x0))))))+((x7*(((((9.09999841569041e-8)*x2))+(((5.36899906525734e-11)*x0))+(((0.0091)*x27))))))+((x3*(((((1.29999977367006e-12)*x2))+((x17*x24))+(((7.66999866465335e-16)*x0)))))));
eerot[6]=((((((((((((-9.99999999e-11)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-9.9999999995e-6)*(((((-0.000589999896986027)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.9999999995)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.999999825400046)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.9999999995)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.99999999945)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-9.9999999995e-6)*(((((5.89999896750027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((9.99999825000046e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((1.76999969104658e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.99999947635014e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((2.9999999985e-10)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-9.9999999995e-6)*(((((2.99999947635014e-10)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.76999969104658e-13)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.9999999985e-5)*(IKsin(j[0]))*(IKsin(j[3]))))+(((2.99999999865e-5)*(((((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.99999999995)*(((((0.000589999896986027)*(IKcos(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.999999825400046)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.9999999995)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.99999999995)*(((((-2.9999999985e-10)*(IKsin(j[0]))*(IKsin(j[3]))))+(((2.99999947635014e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-2.99999999865e-5)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-8)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((0.99999999995)*(((((-5.89999896750027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825000046e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-2.9999999985e-5)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-2.99999999865e-5)*(((((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((1.76999969104658e-13)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-2.99999947635014e-10)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-9.99999999e-6)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.99999999995)*(((((0.9999999995)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.99999999945)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.99999999995)*(((((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.99999999995)*(((((-9.999999995e-6)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-11)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-14)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.9999999999)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.99999999995)*(((((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.999999995e-6)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.9999999945e-11)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-9.9999999995e-6)*(((((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((-9.999999995e-6)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-11)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-14)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((9.999999999e-6)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-9.9999999995e-6)*(((((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.999999995e-6)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.9999999945e-11)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((-9.9999999995e-6)*(((((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((-9.999999995e-6)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-11)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-14)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((9.999999999e-6)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-9.9999999995e-6)*(((((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.999999995e-6)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.9999999945e-11)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.99999999995)*(((((2.99999947635014e-10)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.76999969104658e-13)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.9999999985e-5)*(IKsin(j[0]))*(IKsin(j[3]))))+(((2.99999999865e-5)*(((((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((-0.000589999896986027)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.9999999995)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.999999825400046)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.9999999995)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.99999999945)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((1.76999969104658e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.99999947635014e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((2.9999999985e-10)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-9.99999999e-6)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.99999999995)*(((((5.89999896750027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((9.99999825000046e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((-0.99999999995)*(((((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.999999995e-6)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.9999999945e-11)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.9999999999)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.99999999995)*(((((-9.999999995e-6)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-11)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-14)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-9.9999999995e-6)*(((((-2.9999999985e-5)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-2.99999999865e-5)*(((((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((1.76999969104658e-13)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-2.99999947635014e-10)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((-5.89999896750027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825000046e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((0.000589999896986027)*(IKcos(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.999999825400046)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.9999999995)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((0.9999999995)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.99999999945)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-9.9999999995e-6)*(((((-2.9999999985e-10)*(IKsin(j[0]))*(IKsin(j[3]))))+(((2.99999947635014e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-2.99999999865e-5)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-8)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((9.99999999e-11)*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKsin(j[5]))))))*(IKsin(j[6])))));
eerot[7]=((((((((((((-9.9999999995e-6)*(((((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((-9.999999995e-6)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-11)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-14)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((9.999999999e-6)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-9.9999999995e-6)*(((((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.999999995e-6)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.9999999945e-11)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.99999999995)*(((((2.99999947635014e-10)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.76999969104658e-13)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.9999999985e-5)*(IKsin(j[0]))*(IKsin(j[3]))))+(((2.99999999865e-5)*(((((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((-0.000589999896986027)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.9999999995)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.999999825400046)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.9999999995)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.99999999945)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((1.76999969104658e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.99999947635014e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((2.9999999985e-10)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-9.99999999e-6)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.99999999995)*(((((5.89999896750027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((9.99999825000046e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((-0.99999999995)*(((((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.999999995e-6)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.9999999945e-11)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.9999999999)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.99999999995)*(((((-9.999999995e-6)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-11)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-14)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-9.9999999995e-6)*(((((-2.9999999985e-5)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-2.99999999865e-5)*(((((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((1.76999969104658e-13)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-2.99999947635014e-10)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((-5.89999896750027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825000046e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-9.9999999995e-6)*(((((0.000589999896986027)*(IKcos(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.999999825400046)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.9999999995)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-9.9999999995e-6)*(((((0.9999999995)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.99999999945)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-9.9999999995e-6)*(((((-2.9999999985e-10)*(IKsin(j[0]))*(IKsin(j[3]))))+(((2.99999947635014e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-2.99999999865e-5)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-8)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((9.99999999e-11)*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((-9.999999999e-6)*(IKcos(j[3]))*(IKsin(j[0]))))+(((9.9999999995e-6)*(((((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.999999995e-6)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.9999999945e-11)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-9.999999995e-6)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-11)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-14)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((9.99999999e-6)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.99999999995)*(((((-2.9999999985e-5)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-2.99999999865e-5)*(((((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((1.76999969104658e-13)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-2.99999947635014e-10)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((-5.89999896750027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825000046e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-0.99999999995)*(((((0.000589999896986027)*(IKcos(j[0]))*(IKsin(j[1]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.999999825400046)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.9999999995)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.99999999995)*(((((0.9999999995)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.99999999945)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((-2.9999999985e-10)*(IKsin(j[0]))*(IKsin(j[3]))))+(((2.99999947635014e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-2.99999999865e-5)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.76999969104658e-8)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((9.9999999995e-6)*(((((5.89999896750027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((9.99999825000046e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((9.9999999995e-6)*(((((1.76999969104658e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.99999999865e-5)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.99999947635014e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((2.9999999985e-10)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((-0.000589999896986027)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.9999999995)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.999999825400046)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((9.9999999995e-6)*(((((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.9999999995)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.99999999945)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((9.9999999995e-6)*(((((2.99999947635014e-10)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.76999969104658e-13)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.9999999985e-5)*(IKsin(j[0]))*(IKsin(j[3]))))+(((2.99999999865e-5)*(((((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((9.99999999e-11)*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKcos(j[5]))))+(((((((-0.99999999995)*(((((9.99999825400045e-6)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-9.999999995e-6)*(((((-5.89999897281027e-9)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-9.99999825900045e-6)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-9.9999999945e-11)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.9999999999)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.99999999995)*(((((-9.999999995e-6)*(((((0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((9.9999999945e-6)*(IKsin(j[0]))*(IKsin(j[3]))))+(((9.99999825400045e-11)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-5.89999896986027e-14)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.99999999995)*(((((-0.999999825900045)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000589999897281027)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))))*(IKsin(j[6])))));
IkReal x40=((1.0)*x37);
eerot[8]=(((x1*x16))+(((-1.0)*x15*(((((-1.0)*x35))+x31))))+(((-1.0)*x11*x40))+(((-1.0)*x14*(((((-1.0)*x31))+x35))))+((x13*x30))+(((-1.0)*x12*x40)));
eetrans[2]=((((0.0156000724395911)*x20))+(((0.000245557957260641)*x19))+((x7*(((((-0.009099999999545)*x21))+(((5.36899906525734e-11)*x19))+(((0.009099999999545)*x33))+(((-9.09999841569041e-8)*x20))))))+(((-1.0)*j[2]*(((((0.999999825950045)*x20))+(((-0.000589999897310527)*x19))))))+((x3*(((((-9.099999999545e-8)*x33))+(((-0.00909999841569041)*x20))+(((9.099999999545e-8)*x21))+(((5.36899906525734e-6)*x19))))))+((x7*(((((1.29999977367006e-7)*x20))+(((-7.66999866465335e-11)*x19))+(((1.299999999935e-12)*x33))+(((-1.299999999935e-12)*x21))))))+((x3*(((((-1.29999977367006e-12)*x20))+(((7.66999866465335e-16)*x19))+(((1.299999999935e-7)*x33))+(((-1.299999999935e-7)*x21)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j1,cj1,sj1,htj1,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]), htj1=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=px;
new_r10=((-1.0)*r20);
new_r11=((-1.0)*r21);
new_r12=((-1.0)*r22);
new_py=((-1.0)*pz);
new_r20=r10;
new_r21=r11;
new_r22=r12;
new_pz=py;
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x41=((1.0)*px);
IkReal x42=((1.0)*pz);
IkReal x43=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x43))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x42)));
rxp0_2=((((-1.0)*r10*x41))+((py*r00)));
rxp1_0=((((-1.0)*r21*x43))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x42)));
rxp1_2=((((-1.0)*r11*x41))+((py*r01)));
rxp2_0=((((-1.0)*r22*x43))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x42))+((px*r22)));
rxp2_2=((((-1.0)*r12*x41))+((py*r02)));
{
IkReal j2eval[1];
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x44=pz*pz;
IkReal x45=r00*r00;
IkReal x46=py*py;
IkReal x47=r10*r10;
IkReal x48=r20*r20;
IkReal x49=r21*r21;
IkReal x50=px*px;
IkReal x51=r01*r01;
IkReal x52=r11*r11;
IkReal x53=r02*r02;
IkReal x54=r22*r22;
IkReal x55=r12*r12;
IkReal x56=((40000000000.0)*x50);
IkReal x57=((40000000000.0)*x44);
IkReal x58=((40000000000.0)*x46);
IkReal x59=(x53*x54);
IkReal x60=(x54*x55);
IkReal x61=(x53*x55);
IkReal x62=(x49*x52);
IkReal x63=(x47*x48);
IkReal x64=(x45*x48);
IkReal x65=(x45*x47);
IkReal x66=(x49*x51);
IkReal x67=(x51*x52);
if((((((-1.0)*x56*x61))+(((-1.0)*x56*x59))+(((-80000000000.0)*x44*x48*x49))+((x58*x65))+((x58*x67))+((x58*x63))+((x58*x62))+((x45*x56))+(((-80000000000.0)*x45*x50*x51))+((x57*x63))+((x57*x62))+((x57*x66))+((x57*x64))+(((-1.0)*x58*x61))+(((-1.0)*x58*x60))+((x56*x67))+((x56*x66))+((x56*x65))+((x56*x64))+((x53*x56))+((x49*x57))+((x48*x57))+((x52*x58))+((x51*x56))+((x47*x58))+(((-1.0)*x57*x60))+(((-1.0)*x57*x59))+((x55*x58))+(((-80000000000.0)*x46*x47*x52))+((x54*x57)))) < -0.00001)
continue;
IkReal x68=((5.00000087024992e-6)*(IKsqrt(((((-1.0)*x56*x61))+(((-1.0)*x56*x59))+(((-80000000000.0)*x44*x48*x49))+((x58*x65))+((x58*x67))+((x58*x63))+((x58*x62))+((x45*x56))+(((-80000000000.0)*x45*x50*x51))+((x57*x63))+((x57*x62))+((x57*x66))+((x57*x64))+(((-1.0)*x58*x61))+(((-1.0)*x58*x60))+((x56*x67))+((x56*x66))+((x56*x65))+((x56*x64))+((x53*x56))+((x49*x57))+((x48*x57))+((x52*x58))+((x51*x56))+((x47*x58))+(((-1.0)*x57*x60))+(((-1.0)*x57*x59))+((x55*x58))+(((-80000000000.0)*x46*x47*x52))+((x54*x57))))));
j2array[0]=((0.0156000751547835)+x68);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((0.0156000751547835)+(((-1.0)*x68)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
j2valid[0] = true;
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[3];
IkReal x69=((780003893498.816)*cj1);
IkReal x70=(pp+(((-1.0)*(pz*pz))));
IkReal x71=((50000008702499.2)*cj1*j2);
j0eval[0]=x70;
j0eval[1]=IKsign(x70);
j0eval[2]=((IKabs((((py*x71))+(((-1.0)*py*x69)))))+(IKabs(((((-1.0)*px*x71))+((px*x69))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x72=pz*pz;
IkReal x73=((100000.0)*cj1);
IkReal x74=((500000087.024992)*j2);
IkReal x75=((500000000.0)*pz*sj1);
j0eval[0]=((((-1.0)*cj1*x72))+((cj1*pp)));
j0eval[1]=IKsign(((((-1.0)*x72*x73))+((pp*x73))));
j0eval[2]=((IKabs((((py*x74))+(((-7799963.78019816)*py))+(((-1.0)*py*x75)))))+(IKabs(((((-1.0)*px*x74))+(((7799963.78019816)*px))+((px*x75))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j3]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x77 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x77.valid){
continue;
}
IkReal x76=x77.value;
j0array[0]=((-1.0)*x76);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x76)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKsin(j0))))+((py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=((IKabs(((((100000.017404998)*cj0*py))+(((-100000.017404998)*px*sj0)))))+(((100000.03481)*(IKabs((((cj0*px))+((py*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=((((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))))))+(IKabs(((((100000.017404998)*cj0*py))+(((-100000.017404998)*px*sj0))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x79 = IKatan2WithCheck(IkReal(((((0.999999825950045)*cj0*py))+(((-0.999999825950045)*px*sj0)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x79.valid){
continue;
}
IkReal x78=x79.value;
j3array[0]=((-1.0)*x78);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x78)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x80=IKcos(j3);
IkReal x81=IKsin(j3);
IkReal x82=((0.999999825950045)*x81);
evalcond[0]=(((cj0*py*x82))+(((-1.0)*px*sj0*x82))+((cj0*px*x80))+((py*sj0*x80)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x179 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal(((((0.999999825950045)*cj0*py))+(((-0.999999825950045)*px*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x179.valid){
continue;
}
IkReal x178=x179.value;
j3array[0]=((-1.0)*x178);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x178)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x180=IKcos(j3);
IkReal x181=IKsin(j3);
IkReal x182=((0.999999825950045)*x180);
IkReal x183=((1.0)*x181);
evalcond[0]=(((cj0*py*x182))+(((-1.0)*cj0*px*x183))+(((-1.0)*px*sj0*x182))+(((-1.0)*py*sj0*x183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j3]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x185 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x185.valid){
continue;
}
IkReal x184=x185.value;
j0array[0]=((-1.0)*x184);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x184)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKsin(j0))))+((py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=((IKabs(((((-100000.017404998)*cj0*py))+(((100000.017404998)*px*sj0)))))+(((100000.03481)*(IKabs((((cj0*px))+((py*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=((IKabs(((((-100000.017404998)*cj0*py))+(((100000.017404998)*px*sj0)))))+(((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x187 = IKatan2WithCheck(IkReal(((((0.999999825950045)*px*sj0))+(((-0.999999825950045)*cj0*py)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x187.valid){
continue;
}
IkReal x186=x187.value;
j3array[0]=((-1.0)*x186);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x186)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x188=IKcos(j3);
IkReal x189=IKsin(j3);
IkReal x190=((0.999999825950045)*x189);
evalcond[0]=((((-1.0)*cj0*py*x190))+((px*sj0*x190))+((cj0*px*x188))+((py*sj0*x188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x192 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal(((((0.999999825950045)*px*sj0))+(((-0.999999825950045)*cj0*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x192.valid){
continue;
}
IkReal x191=x192.value;
j3array[0]=((-1.0)*x191);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x191)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x193=IKcos(j3);
IkReal x194=IKsin(j3);
IkReal x195=((0.999999825950045)*x193);
IkReal x196=((1.0)*x194);
evalcond[0]=((((-1.0)*cj0*py*x195))+((px*sj0*x195))+(((-1.0)*cj0*px*x196))+(((-1.0)*py*sj0*x196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x197=((100000.0)*cj1);
IkReal x198=((100000.017404998)*j2);
IkReal x199=((100000.0)*pz*sj1);
CheckValue<IkReal> x200 = IKatan2WithCheck(IkReal(((((1559.99275603963)*px))+((px*x199))+(((-1.0)*px*x198)))),IkReal(((((-1559.99275603963)*py))+(((-1.0)*py*x199))+((py*x198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x200.valid){
continue;
}
CheckValue<IkReal> x201=IKPowWithIntegerCheck(IKsign(((((-1.0)*x197*(pz*pz)))+((pp*x197)))),-1);
if(!x201.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x200.value)+(((1.5707963267949)*(x201.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x202=IKcos(j0);
IkReal x203=IKsin(j0);
IkReal x204=((0.999999825950045)*cj1);
IkReal x205=(px*x203);
IkReal x206=(py*x202);
evalcond[0]=(((px*x202))+((py*x203)));
evalcond[1]=((((0.0156000724395911)*cj1))+x206+(((-1.0)*j2*x204))+(((-1.0)*x205)));
evalcond[2]=((0.0155999248452296)+(((-1.0)*x204*x205))+((x204*x206))+(((0.999999825950045)*pz*sj1))+(((-1.0)*j2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x207=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-100000.017404998)*cj1*pz))+((cj0*py*x207))+(((-1.0)*px*sj0*x207)))))+(((100000.03481)*(IKabs((((cj0*px))+((py*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x208=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-100000.017404998)*cj1*pz))+((cj0*py*x208))+(((-1.0)*px*sj0*x208)))))+(((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x209=((0.999999825950045)*sj1);
CheckValue<IkReal> x211 = IKatan2WithCheck(IkReal(((((-0.999999825950045)*cj1*pz))+((cj0*py*x209))+(((-1.0)*px*sj0*x209)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x211.valid){
continue;
}
IkReal x210=x211.value;
j3array[0]=((-1.0)*x210);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x210)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x212=IKcos(j3);
IkReal x213=IKsin(j3);
IkReal x214=((0.999999825950045)*x213);
evalcond[0]=((((-1.0)*px*sj0*sj1*x214))+((cj0*px*x212))+((py*sj0*x212))+(((-1.0)*cj1*pz*x214))+((cj0*py*sj1*x214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x215=((0.999999825950045)*sj1);
CheckValue<IkReal> x217 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal((((cj0*py*x215))+(((-0.999999825950045)*cj1*pz))+(((-1.0)*px*sj0*x215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x217.valid){
continue;
}
IkReal x216=x217.value;
j3array[0]=((-1.0)*x216);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x216)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x218=IKcos(j3);
IkReal x219=IKsin(j3);
IkReal x220=((1.0)*x219);
IkReal x221=((0.999999825950045)*sj1*x218);
evalcond[0]=((((-1.0)*px*sj0*x221))+(((-1.0)*py*sj0*x220))+(((-0.999999825950045)*cj1*pz*x218))+((cj0*py*x221))+(((-1.0)*cj0*px*x220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x222=(cj1*py);
IkReal x223=((0.999999825950045)*j2);
IkReal x224=(cj1*px);
CheckValue<IkReal> x225=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x225.valid){
continue;
}
CheckValue<IkReal> x226 = IKatan2WithCheck(IkReal(((((-1.0)*x223*x224))+(((0.0156000724395911)*x224)))),IkReal(((((-0.0156000724395911)*x222))+((x222*x223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x226.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x225.value)))+(x226.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x227=IKcos(j0);
IkReal x228=IKsin(j0);
IkReal x229=((0.999999825950045)*cj1);
IkReal x230=(px*x228);
IkReal x231=(py*x227);
evalcond[0]=(((py*x228))+((px*x227)));
evalcond[1]=((((0.0156000724395911)*cj1))+(((-1.0)*j2*x229))+x231+(((-1.0)*x230)));
evalcond[2]=((0.0155999248452296)+((x229*x231))+(((0.999999825950045)*pz*sj1))+(((-1.0)*j2))+(((-1.0)*x229*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x232=((100000.017404998)*sj1);
j3eval[0]=((((100000.03481)*(IKabs((((cj0*px))+((py*sj0)))))))+(IKabs(((((-100000.017404998)*cj1*pz))+((cj0*py*x232))+(((-1.0)*px*sj0*x232))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x233=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-100000.017404998)*cj1*pz))+((cj0*py*x233))+(((-1.0)*px*sj0*x233)))))+(((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x234=((0.999999825950045)*sj1);
CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal(((((-0.999999825950045)*cj1*pz))+((cj0*py*x234))+(((-1.0)*px*sj0*x234)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x236.valid){
continue;
}
IkReal x235=x236.value;
j3array[0]=((-1.0)*x235);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x235)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x237=IKcos(j3);
IkReal x238=IKsin(j3);
IkReal x239=((0.999999825950045)*x238);
evalcond[0]=(((cj0*py*sj1*x239))+((py*sj0*x237))+(((-1.0)*px*sj0*sj1*x239))+(((-1.0)*cj1*pz*x239))+((cj0*px*x237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x240=((0.999999825950045)*sj1);
CheckValue<IkReal> x242 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal((((cj0*py*x240))+(((-0.999999825950045)*cj1*pz))+(((-1.0)*px*sj0*x240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x242.valid){
continue;
}
IkReal x241=x242.value;
j3array[0]=((-1.0)*x241);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x241)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x243=IKcos(j3);
IkReal x244=IKsin(j3);
IkReal x245=((1.0)*x244);
IkReal x246=((0.999999825950045)*sj1*x243);
evalcond[0]=((((-1.0)*py*sj0*x245))+((cj0*py*x246))+(((-1.0)*cj0*px*x245))+(((-0.999999825950045)*cj1*pz*x243))+(((-1.0)*px*sj0*x246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x248 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x248.valid){
continue;
}
IkReal x247=x248.value;
j0array[0]=((-1.0)*x247);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x247)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x249=((0.999999825950045)*cj1);
j2array[0]=((0.0155999248452296)+((cj0*py*x249))+(((-1.0)*px*sj0*x249))+(((0.999999825950045)*pz*sj1)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j3eval[1];
IkReal x250=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-1.0)*px*sj0*x250))+(((-100000.017404998)*cj1*pz))+((cj0*py*x250)))))+(((100000.03481)*(IKabs((((cj0*px))+((py*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x251=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-1.0)*px*sj0*x251))+(((-100000.017404998)*cj1*pz))+((cj0*py*x251)))))+(((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x252=((0.999999825950045)*sj1);
CheckValue<IkReal> x254 = IKatan2WithCheck(IkReal(((((-0.999999825950045)*cj1*pz))+(((-1.0)*px*sj0*x252))+((cj0*py*x252)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x254.valid){
continue;
}
IkReal x253=x254.value;
j3array[0]=((-1.0)*x253);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x253)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x255=IKcos(j3);
IkReal x256=IKsin(j3);
IkReal x257=((0.999999825950045)*x256);
evalcond[0]=(((cj0*py*sj1*x257))+((cj0*px*x255))+(((-1.0)*px*sj0*sj1*x257))+((py*sj0*x255))+(((-1.0)*cj1*pz*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x258=((0.999999825950045)*sj1);
CheckValue<IkReal> x260 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal(((((-0.999999825950045)*cj1*pz))+(((-1.0)*px*sj0*x258))+((cj0*py*x258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x260.valid){
continue;
}
IkReal x259=x260.value;
j3array[0]=((-1.0)*x259);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x259)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x261=IKcos(j3);
IkReal x262=IKsin(j3);
IkReal x263=((1.0)*x262);
IkReal x264=((0.999999825950045)*sj1*x261);
evalcond[0]=((((-1.0)*cj0*px*x263))+((cj0*py*x264))+(((-0.999999825950045)*cj1*pz*x261))+(((-1.0)*px*sj0*x264))+(((-1.0)*py*sj0*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x265=IKPowWithIntegerCheck(sj1,-1);
if(!x265.valid){
continue;
}
j2array[0]=((0.0156000751547835)+(((1.00000017404998)*pz*(x265.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[3];
IkReal x266=((780003893498.816)*cj1);
IkReal x267=(pp+(((-1.0)*(pz*pz))));
IkReal x268=((50000008702499.2)*cj1*j2);
j0eval[0]=x267;
j0eval[1]=IKsign(x267);
j0eval[2]=((IKabs((((py*x268))+(((-1.0)*py*x266)))))+(IKabs(((((-1.0)*px*x268))+((px*x266))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x269=pz*pz;
IkReal x270=((100000.0)*cj1);
IkReal x271=((500000087.024992)*j2);
IkReal x272=((500000000.0)*pz*sj1);
j0eval[0]=(((cj1*pp))+(((-1.0)*cj1*x269)));
j0eval[1]=IKsign(((((-1.0)*x269*x270))+((pp*x270))));
j0eval[2]=((IKabs((((px*x272))+(((7799963.78019816)*px))+(((-1.0)*px*x271)))))+(IKabs(((((-7799963.78019816)*py))+((py*x271))+(((-1.0)*py*x272))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j3]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x274 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x274.valid){
continue;
}
IkReal x273=x274.value;
j0array[0]=((-1.0)*x273);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x273)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKsin(j0))))+((py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=((IKabs(((((100000.017404998)*cj0*py))+(((-100000.017404998)*px*sj0)))))+(((100000.03481)*(IKabs((((cj0*px))+((py*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=((((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))))))+(IKabs(((((100000.017404998)*cj0*py))+(((-100000.017404998)*px*sj0))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(((((0.999999825950045)*cj0*py))+(((-0.999999825950045)*px*sj0)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
IkReal x275=x276.value;
j3array[0]=((-1.0)*x275);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x275)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x277=IKcos(j3);
IkReal x278=IKsin(j3);
IkReal x279=((0.999999825950045)*x278);
evalcond[0]=(((cj0*py*x279))+((py*sj0*x277))+((cj0*px*x277))+(((-1.0)*px*sj0*x279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x281 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal(((((0.999999825950045)*cj0*py))+(((-0.999999825950045)*px*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x281.valid){
continue;
}
IkReal x280=x281.value;
j3array[0]=((-1.0)*x280);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x280)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x282=IKcos(j3);
IkReal x283=IKsin(j3);
IkReal x284=((0.999999825950045)*x282);
IkReal x285=((1.0)*x283);
evalcond[0]=((((-1.0)*py*sj0*x285))+(((-1.0)*cj0*px*x285))+(((-1.0)*px*sj0*x284))+((cj0*py*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j3]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x287 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x287.valid){
continue;
}
IkReal x286=x287.value;
j0array[0]=((-1.0)*x286);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x286)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKsin(j0))))+((py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=((IKabs(((((-100000.017404998)*cj0*py))+(((100000.017404998)*px*sj0)))))+(((100000.03481)*(IKabs((((cj0*px))+((py*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=((IKabs(((((-100000.017404998)*cj0*py))+(((100000.017404998)*px*sj0)))))+(((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x289 = IKatan2WithCheck(IkReal(((((0.999999825950045)*px*sj0))+(((-0.999999825950045)*cj0*py)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x289.valid){
continue;
}
IkReal x288=x289.value;
j3array[0]=((-1.0)*x288);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x288)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x290=IKcos(j3);
IkReal x291=IKsin(j3);
IkReal x292=((0.999999825950045)*x291);
evalcond[0]=(((px*sj0*x292))+((py*sj0*x290))+(((-1.0)*cj0*py*x292))+((cj0*px*x290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal(((((0.999999825950045)*px*sj0))+(((-0.999999825950045)*cj0*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
IkReal x293=x294.value;
j3array[0]=((-1.0)*x293);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x293)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x295=IKcos(j3);
IkReal x296=IKsin(j3);
IkReal x297=((0.999999825950045)*x295);
IkReal x298=((1.0)*x296);
evalcond[0]=((((-1.0)*cj0*px*x298))+((px*sj0*x297))+(((-1.0)*cj0*py*x297))+(((-1.0)*py*sj0*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x299=((100000.0)*cj1);
IkReal x300=((100000.017404998)*j2);
IkReal x301=((100000.0)*pz*sj1);
CheckValue<IkReal> x302 = IKatan2WithCheck(IkReal((((px*x301))+(((-1.0)*px*x300))+(((1559.99275603963)*px)))),IkReal(((((-1559.99275603963)*py))+(((-1.0)*py*x301))+((py*x300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x302.valid){
continue;
}
CheckValue<IkReal> x303=IKPowWithIntegerCheck(IKsign((((pp*x299))+(((-1.0)*x299*(pz*pz))))),-1);
if(!x303.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x302.value)+(((1.5707963267949)*(x303.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x304=IKcos(j0);
IkReal x305=IKsin(j0);
IkReal x306=((0.999999825950045)*cj1);
IkReal x307=(px*x305);
IkReal x308=(py*x304);
evalcond[0]=(((px*x304))+((py*x305)));
evalcond[1]=((((-1.0)*x307))+(((0.0156000724395911)*cj1))+(((-1.0)*j2*x306))+x308);
evalcond[2]=((0.0155999248452296)+(((-1.0)*x306*x307))+(((0.999999825950045)*pz*sj1))+(((-1.0)*j2))+((x306*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x309=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-100000.017404998)*cj1*pz))+(((-1.0)*px*sj0*x309))+((cj0*py*x309)))))+(((100000.03481)*(IKabs((((cj0*px))+((py*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x310=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-1.0)*px*sj0*x310))+((cj0*py*x310))+(((-100000.017404998)*cj1*pz)))))+(((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x311=((0.999999825950045)*sj1);
CheckValue<IkReal> x313 = IKatan2WithCheck(IkReal(((((-1.0)*px*sj0*x311))+(((-0.999999825950045)*cj1*pz))+((cj0*py*x311)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x313.valid){
continue;
}
IkReal x312=x313.value;
j3array[0]=((-1.0)*x312);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x312)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x314=IKcos(j3);
IkReal x315=IKsin(j3);
IkReal x316=((0.999999825950045)*x315);
evalcond[0]=(((cj0*py*sj1*x316))+(((-1.0)*px*sj0*sj1*x316))+((cj0*px*x314))+(((-1.0)*cj1*pz*x316))+((py*sj0*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x317=((0.999999825950045)*sj1);
CheckValue<IkReal> x319 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal(((((-1.0)*px*sj0*x317))+(((-0.999999825950045)*cj1*pz))+((cj0*py*x317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x319.valid){
continue;
}
IkReal x318=x319.value;
j3array[0]=((-1.0)*x318);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x318)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x320=IKcos(j3);
IkReal x321=IKsin(j3);
IkReal x322=((1.0)*x321);
IkReal x323=((0.999999825950045)*sj1*x320);
evalcond[0]=((((-1.0)*cj0*px*x322))+(((-1.0)*px*sj0*x323))+((cj0*py*x323))+(((-0.999999825950045)*cj1*pz*x320))+(((-1.0)*py*sj0*x322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x324=(cj1*py);
IkReal x325=((0.999999825950045)*j2);
IkReal x326=(cj1*px);
CheckValue<IkReal> x327=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x327.valid){
continue;
}
CheckValue<IkReal> x328 = IKatan2WithCheck(IkReal(((((-1.0)*x325*x326))+(((0.0156000724395911)*x326)))),IkReal(((((-0.0156000724395911)*x324))+((x324*x325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x328.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x327.value)))+(x328.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x329=IKcos(j0);
IkReal x330=IKsin(j0);
IkReal x331=((0.999999825950045)*cj1);
IkReal x332=(px*x330);
IkReal x333=(py*x329);
evalcond[0]=(((py*x330))+((px*x329)));
evalcond[1]=((((0.0156000724395911)*cj1))+x333+(((-1.0)*x332))+(((-1.0)*j2*x331)));
evalcond[2]=((0.0155999248452296)+((x331*x333))+(((-1.0)*x331*x332))+(((0.999999825950045)*pz*sj1))+(((-1.0)*j2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x334=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-100000.017404998)*cj1*pz))+((cj0*py*x334))+(((-1.0)*px*sj0*x334)))))+(((100000.03481)*(IKabs((((cj0*px))+((py*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x335=((100000.017404998)*sj1);
j3eval[0]=((IKabs(((((-100000.017404998)*cj1*pz))+((cj0*py*x335))+(((-1.0)*px*sj0*x335)))))+(((100000.03481)*(IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x336=((0.999999825950045)*sj1);
CheckValue<IkReal> x338 = IKatan2WithCheck(IkReal(((((-0.999999825950045)*cj1*pz))+((cj0*py*x336))+(((-1.0)*px*sj0*x336)))),IkReal(((((-1.0)*py*sj0))+(((-1.0)*cj0*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x338.valid){
continue;
}
IkReal x337=x338.value;
j3array[0]=((-1.0)*x337);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x337)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x339=IKcos(j3);
IkReal x340=IKsin(j3);
IkReal x341=((0.999999825950045)*x340);
evalcond[0]=((((-1.0)*px*sj0*sj1*x341))+((py*sj0*x339))+(((-1.0)*cj1*pz*x341))+((cj0*px*x339))+((cj0*py*sj1*x341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x342=((0.999999825950045)*sj1);
CheckValue<IkReal> x344 = IKatan2WithCheck(IkReal((((cj0*px))+((py*sj0)))),IkReal((((cj0*py*x342))+(((-0.999999825950045)*cj1*pz))+(((-1.0)*px*sj0*x342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x344.valid){
continue;
}
IkReal x343=x344.value;
j3array[0]=((-1.0)*x343);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x343)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x345=IKcos(j3);
IkReal x346=IKsin(j3);
IkReal x347=((1.0)*x346);
IkReal x348=((0.999999825950045)*sj1*x345);
evalcond[0]=((((-1.0)*cj0*px*x347))+((cj0*py*x348))+(((-1.0)*py*sj0*x347))+(((-1.0)*px*sj0*x348))+(((-0.999999825950045)*cj1*pz*x345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x83=((9.99999825900045e-6)*sj1);
IkReal x84=((0.99999999995)*cj3);
IkReal x85=((0.999999825950045)*sj1);
IkReal x86=((9.9999999995e-6)*cj3);
IkReal x87=((0.000589999897310527)*cj1);
IkReal x88=((0.99999999995)*sj3);
IkReal x89=((5.89999897281027e-9)*sj1);
IkReal x90=(cj1*r20);
IkReal x91=((0.000589999897281027)*sj1);
IkReal x92=((0.000589999897310527)*sj1);
IkReal x93=((1.0)*sj0);
IkReal x94=((9.9999999995e-6)*sj3);
IkReal x95=(cj1*r22);
IkReal x96=((0.999999825900045)*cj1);
IkReal x97=((9.99999825900045e-6)*cj1);
IkReal x98=(cj1*r21);
IkReal x99=((0.999999825900045)*sj1);
IkReal x100=(r20*x92);
IkReal x101=(r21*x92);
IkReal x102=(r22*x92);
IkReal x103=(((cj0*r10))+(((-1.0)*r00*x93)));
IkReal x104=(((r10*sj0))+((cj0*r00)));
IkReal x105=((((-1.0)*r01*x93))+((cj0*r11)));
IkReal x106=(((r11*sj0))+((cj0*r01)));
IkReal x107=(((cj0*r12))+(((-1.0)*r02*x93)));
IkReal x108=(((r12*sj0))+((cj0*r02)));
IkReal x109=(sj1*x107);
IkReal x110=(sj1*x103);
IkReal x111=(x103*x87);
IkReal x112=(x103*x85);
IkReal x113=(x105*x87);
IkReal x114=(x105*x85);
IkReal x115=(x107*x87);
IkReal x116=(x107*x85);
IkReal x117=(x113+x114+x101);
IkReal x118=(x116+x115+x102);
IkReal x119=(x112+x111+x100);
IkReal x120=(x119+(((-0.999999825950045)*x90)));
IkReal x121=(x117+(((-0.999999825950045)*x98)));
IkReal x122=(x118+(((-0.999999825950045)*x95)));
new_r00=((((-1.0)*x120*x84))+(((-1.0)*x103*x89))+(((5.89999897281027e-9)*x90))+((x103*x97))+((r20*x83))+((x104*x88)));
new_r01=((((-1.0)*x120*x86))+(((-1.0)*x103*x96))+((x103*x91))+(((-0.000589999897281027)*x90))+(((-1.0)*r20*x99))+((x104*x94)));
new_r02=(((cj3*x104))+((sj3*((x119+(((-0.999999825950045)*x90)))))));
new_r10=(((r21*x83))+(((5.89999897281027e-9)*x98))+(((-1.0)*x105*x89))+((x106*x88))+(((-1.0)*x121*x84))+((x105*x97)));
new_r11=((((-1.0)*x105*x96))+((x106*x94))+(((-0.000589999897281027)*x98))+(((-1.0)*r21*x99))+(((-1.0)*x121*x86))+((x105*x91)));
new_r12=(((cj3*x106))+((sj3*((x117+(((-0.999999825950045)*x98)))))));
new_r20=(((x107*x97))+(((5.89999897281027e-9)*x95))+((x108*x88))+((r22*x83))+(((-1.0)*x122*x84))+(((-1.0)*x107*x89)));
new_r21=((((-1.0)*x107*x96))+((x107*x91))+(((-0.000589999897281027)*x95))+(((-1.0)*r22*x99))+((x108*x94))+(((-1.0)*x122*x86)));
new_r22=(((cj3*x108))+((sj3*((x118+(((-0.999999825950045)*x95)))))));
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((0.99999999955)*new_r21))+(((-3.0000000012e-5)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.99999999955)*new_r20))+(((2.9999999985e-5)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.99999999955)*new_r21))+(((-3.0000000012e-5)*new_r20))))+IKsqr(((((0.99999999955)*new_r20))+(((2.9999999985e-5)*new_r21))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((0.99999999955)*new_r21))+(((-3.0000000012e-5)*new_r20))), ((((0.99999999955)*new_r20))+(((2.9999999985e-5)*new_r21))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x123=IKsin(j4);
IkReal x124=IKcos(j4);
evalcond[0]=((((2.9999999985e-5)*x123))+(((-0.99999999955)*x124))+new_r20);
evalcond[1]=((((-2.9999999985e-5)*x124))+(((-0.99999999955)*x123))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x125=new_r02*new_r02;
IkReal x126=new_r12*new_r12;
j6eval[0]=((((0.5)*(IKabs(((0.000159999999848)+(((-0.000159999999848)*x126))+(((-0.000159999999848)*x125)))))))+(((0.5)*(IKabs(((7.9999999924e-5)+(((-7.9999999924e-5)*x125))+(((-7.9999999924e-5)*x126)))))))+(IKabs(((-0.000119999999886)+(((0.000119999999886)*x126))+(((0.000119999999886)*x125)))))+(((0.5)*(IKabs(((-3.9999999962e-5)+(((3.9999999962e-5)*x126))+(((3.9999999962e-5)*x125))))))));
if( IKabs(j6eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j5, j6]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j6evalpoly[1];
IkReal x127=new_r02*new_r02;
IkReal x128=new_r12*new_r12;
IkReal x129=((7.9999999924e-5)+(((-7.9999999924e-5)*x127))+(((-7.9999999924e-5)*x128)));
op[0]=x129;
op[1]=0;
op[2]=((0.000159999999848)+(((-0.000159999999848)*x128))+(((-0.000159999999848)*x127)));
op[3]=0;
op[4]=x129;
polyroots4(op,zeror,numroots);
IkReal j6array[4], cj6array[4], sj6array[4], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[4]={true,true,true,true};
_nj6 = 4;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x130=new_r02*new_r02;
IkReal x131=new_r12*new_r12;
IkReal x132=((3.9999999962e-5)*x130);
IkReal x133=((3.9999999962e-5)*x131);
IkReal x134=((-0.000119999999886)+(((0.000119999999886)*x131))+(((0.000119999999886)*x130)));
IkReal x135=((-3.9999999962e-5)+x133+x132);
j6evalpoly[0]=(((x134*(htj6*htj6)))+x135+((x135*(htj6*htj6*htj6*htj6*htj6*htj6)))+((x134*(htj6*htj6*htj6*htj6))));
if( IKabs(j6evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x136=(cj6*new_r02);
IkReal x137=(new_r12*sj6);
IkReal x138=(new_r02*sj6);
IkReal x139=(cj6*new_r12);
if( IKabs(((((-8.999999991e-15)*x136))+(((-1.0)*x139))+(((-1.0)*x138))+(((8.999999991e-15)*x137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-8.999999991e-15)*x139))+(((-8.999999991e-15)*x138))+(((1.0)*x136))+(((-1.0)*x137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.999999991e-15)*x136))+(((-1.0)*x139))+(((-1.0)*x138))+(((8.999999991e-15)*x137))))+IKsqr(((((-8.999999991e-15)*x139))+(((-8.999999991e-15)*x138))+(((1.0)*x136))+(((-1.0)*x137))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-8.999999991e-15)*x136))+(((-1.0)*x139))+(((-1.0)*x138))+(((8.999999991e-15)*x137))), ((((-8.999999991e-15)*x139))+(((-8.999999991e-15)*x138))+(((1.0)*x136))+(((-1.0)*x137))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x140=IKsin(j5);
IkReal x141=IKcos(j5);
IkReal x142=(new_r11*sj6);
IkReal x143=(cj6*sj4);
IkReal x144=((2.9999999985e-10)*cj6);
IkReal x145=(cj6*new_r01);
IkReal x146=(cj6*new_r02);
IkReal x147=(cj6*new_r10);
IkReal x148=((2.9999999985e-10)*sj4);
IkReal x149=((0.99999999995)*new_r12);
IkReal x150=((2.9999999985e-5)*sj4);
IkReal x151=(new_r00*sj6);
IkReal x152=((2.9999999985e-10)*cj4);
IkReal x153=((2.9999999985e-5)*cj4);
IkReal x154=(cj6*new_r00);
IkReal x155=(cj6*new_r12);
IkReal x156=((0.99999999995)*new_r02);
IkReal x157=((0.99999999995)*new_r10);
IkReal x158=((0.99999999955)*sj4);
IkReal x159=(new_r10*sj6);
IkReal x160=(new_r01*sj6);
IkReal x161=((0.99999999995)*new_r00);
IkReal x162=(new_r12*sj6);
IkReal x163=(cj6*new_r11);
IkReal x164=((0.99999999995)*new_r01);
IkReal x165=(new_r02*sj6);
IkReal x166=(cj4*x141);
IkReal x167=((9.9999999995e-6)*x140);
IkReal x168=(sj6*x141);
IkReal x169=((0.99999999955)*x140);
IkReal x170=((0.99999999995)*x141);
IkReal x171=((2.9999999985e-5)*x141);
IkReal x172=(cj6*x140);
IkReal x173=((8.999999991e-15)*x141);
IkReal x174=((9.9999999995e-6)*x141);
IkReal x175=(sj6*x140);
IkReal x176=((1.0)*x141);
IkReal x177=((0.99999999995)*x140);
evalcond[0]=(x173+x165+x155+(((1.0)*x140)));
evalcond[1]=((((-1.0)*x176))+x146+(((-1.0)*x162))+(((8.999999991e-15)*x140)));
evalcond[2]=(((x140*x152))+x151+x147+(((-1.0)*x141*x158))+(((-1.0)*x141*x153)));
evalcond[3]=(((x140*x148))+(((0.99999999955)*x166))+x163+x160+(((-1.0)*x141*x150)));
evalcond[4]=((((-1.0)*x140*x153))+(((-1.0)*x140*x158))+x154+(((-1.0)*x159))+(((-1.0)*x141*x152)));
evalcond[5]=(((cj4*x169))+(((-1.0)*x140*x150))+x145+(((-1.0)*x142))+(((-1.0)*x141*x148)));
evalcond[6]=((((8.999999991e-15)*x168))+(((8.999999991e-15)*x172))+(((-1.0)*cj6*x176))+(((1.0)*x175))+new_r02);
evalcond[7]=((((-8.999999991e-15)*x175))+((cj6*x173))+(((1.0)*x172))+new_r12+(((1.0)*x168)));
evalcond[8]=((((-1.0)*x143*x169))+(((-1.0)*x153*x172))+(((-1.0)*x158*x168))+(((-1.0)*x144*x166))+((x152*x175))+new_r00+(((-1.0)*x153*x168)));
evalcond[9]=((((-2.9999999985e-10)*x141*x143))+((cj4*cj6*x169))+(((0.99999999955)*sj6*x166))+(((-1.0)*x150*x168))+(((-2.9999999985e-5)*x140*x143))+((x148*x175))+new_r01);
evalcond[10]=((((-0.99999999955)*x141*x143))+((x152*x168))+((cj4*x140*x144))+(((-1.0)*cj6*x141*x153))+new_r10+((x158*x175))+((x153*x175)));
evalcond[11]=((((-1.0)*cj4*sj6*x169))+(((-1.0)*x143*x171))+(((0.99999999955)*cj6*x166))+((x150*x175))+((x148*x168))+new_r11+(((2.9999999985e-10)*x140*x143)));
evalcond[12]=((-9.9999999905e-6)+((x156*x168))+(((-1.0)*x162*x174))+((x146*x174))+((x146*x177))+(((-1.0)*x155*x167))+(((-1.0)*x165*x167))+((cj6*x141*x149))+(((-1.0)*x149*x175)));
evalcond[13]=((0.99999999995)+((x149*x172))+((x149*x168))+(((-1.0)*x162*x167))+((x146*x167))+((x156*x175))+((x165*x174))+(((-1.0)*x146*x170))+((x155*x174)));
evalcond[14]=((((-1.0)*x154*x170))+((x157*x168))+(((-1.0)*x159*x167))+((x151*x177))+((x151*x174))+(((-9.999999995e-6)*sj4))+((x154*x167))+((x147*x177))+((x147*x174)));
evalcond[15]=((((-1.0)*x142*x167))+((x145*x167))+(((-1.0)*x145*x170))+((x163*x177))+((x163*x174))+(((9.999999995e-6)*cj4))+((x142*x170))+((x160*x174))+((x160*x177)));
evalcond[16]=((((-1.0)*x159*x174))+((x151*x170))+(((-1.0)*x151*x167))+((x147*x170))+(((-0.9999999995)*sj4))+(((-1.0)*x147*x167))+((x154*x177))+((x154*x174))+(((-1.0)*x157*x175))+(((-2.99999999865e-5)*cj4)));
evalcond[17]=((((0.9999999995)*cj4))+(((-1.0)*x142*x177))+(((-1.0)*x142*x174))+(((-1.0)*x160*x167))+(((-1.0)*x163*x167))+((x145*x177))+((x145*x174))+((x163*x170))+(((-2.99999999865e-5)*sj4))+((x160*x170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 17;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - master (1eec852123922aa81d674ecf98fa7090)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
